let User,hashPassword,comparePassword;_8e8‍.x([["register",()=>register]]);_8e8‍.w("../models/user",[["default",["User"],function(v){User=v}]]);_8e8‍.w("../utils/auth",[["hashPassword",["hashPassword"],function(v){hashPassword=v}],["comparePassword",["comparePassword"],function(v){comparePassword=v}]]);


       const register = async (req, res) => {
    try {
        const { username, email, password } = req.body;

        //validation
        if (!username) return res.status(400).send("Valid Username required");
        if (!password || password.length < 6) {
            return res.status(400).send("Valid Password required (minimum 6 characters)");
        }
        let distinctUser = await User.findOne({email}).exec();
        //if (!!distinctUser === false) return res.status(400).send('Email is taken')
        if (distinctUser) return res.status(400).send("Email is taken")

        const hashedPassword = await hashPassword(password);

        const user = new User ({
            username,
            email, 
            password: hashedPassword
        }).save();
        _8e8‍.g.console.log('saved user', user);
        return res.json({ok:true})
    } catch (err) {
        _8e8‍.g.console.log(err);
        return res.status(400).send('Error. Try again');
    }
};
